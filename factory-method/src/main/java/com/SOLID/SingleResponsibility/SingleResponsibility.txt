Каждый объект должен иметь одну ответственность и эта ответственность должна быть полностью инкапсулирована в класс.
Все его поведения должны быть направлены исключительно на обеспечение этой ответственности.

==================Сигнал
1) Если при изменении кода, отвечающего за одну ответственность,
в приложении появляются исправления кода, отвечающего за другую ответственность, то это первый сигнал .
2) объекту класса становится позволительно слишком много;
3) Любое изменение логики поведения объекта приводит к изменениям в других местах приложения, где это не подразумевалось изначально;
4) Невозможно легко отделить и применить класс в другой сфере приложения, так как это потянет ненужные зависимости.


==================Пример
Класс, который составляет и печатает отчёт. Такой класс может измениться по двум причинам:
-  может измениться само содержимое отчёта
-  может измениться формат отчёта.
Оба аспекта этих причин являются двумя разными ответственностями.
Нужно разделить класс на два новых класса, для которых будет характерна только одна ответственность.


==================Причина
Если произошло изменение в процессе составления отчёта — есть большая вероятность, что в негодность придёт код, отвечающий за печать.


==================Исключения
1) Объединение ответственностей является общепринятой практикой и в этом нет ничего плохого, до тех пор пока это легко обслуживать.
2) Следование принципу единственной ответственности зависит от функций программного продукта и является труднейшим при проектировании приложений
3) Если же изменения кода, отвечающего за одну ответственность, не вносят изменения в код, отвечающий за другую ответственность, то этот принцип можно не применять.