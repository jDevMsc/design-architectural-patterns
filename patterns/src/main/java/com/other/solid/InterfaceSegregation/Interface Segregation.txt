Interface separation principle

Clients should not be forced to depend on methods that are not used. (too bloated interface, not all methods and properties of which are used and can be claimed)

Reason:
If this principle is violated, the client using the interface depends on methods that it does not use, and therefore is susceptible to changes in these methods.
As a result, there is a rigid dependence of the relationship between different parts of the interface that may not be connected during its implementation


Solution:
The class interface is divided into separate parts that make up separate interfaces.
Then these interfaces can be applied and changed independently of each other.
As a result, the application of the principle of separation of interfaces makes the system loosely coupled, and thus it is easier to modify and update.