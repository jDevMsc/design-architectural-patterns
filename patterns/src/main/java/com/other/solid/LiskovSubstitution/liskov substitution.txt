Принцип подстановки Лисков

Представляет собой некоторое руководство по созданию иерархий наследования.

Методы, которые используют базовый тип, должны иметь возможность использовать подтипы базового типа, не зная об этом.
 или
Должна быть возможность вместо базового типа подставить любой его подтип.


Цель:=================
Помогает четче сформулировать иерархию классов, определить функционал для базовых и производных классов и избежать возможных проблем при применении полиморфизма.



Пример:===============
Прямоугольник наследуется от квадрата и и главный метод работает с ним, при подстановке в гл. метод квадрата, изменяется поведение, и оно выззовет не стандартное поведение.
public static void Main(string[] args)
    {
        Rectangle rect = new Square();
        TestRectangleArea(rect);

    }

    public static void TestRectangleArea(Rectangle rect)
    {
        rect.Height = 5;
        rect.Width = 10;
        if (rect.GetArea() != 50)
            throw new Exception("Некорректная площадь!"); квадрат будет здесь вести себя по своему, но можно сделать проверку по типу(WRONG)

    }


Правила:==================
  Предусловия (Preconditions) не могут быть усилены в подклассе.
  Другими словами подклассы не должны создавать больше предусловий, чем это определено в базовом классе, для выполнения некоторого поведения
  Предусловия представляют набор условий, необходимых для безошибочного выполнения метода

  Постусловия (Postconditions) не могут быть ослаблены в подклассе. То есть подклассы должны выполнять все постусловия, которые определены в базовом классе.

  Инварианты (Invariants) — все условия базового класса - также должны быть сохранены и в подклассе


Решение:=======================
  Проблема решается в общем случае с помощью абстрагирования и выделения общего функционала.
  То есть не один из них наследуется от другого, а оба они наследуются от одного общего класса.
  Таким образом, принцип подстановки Лисков заставляет задуматься над правильностью построения иерархий классов и применения полиморфизма, позволяя уйти от ложных иерархий наследования и делая всю систему классом более стройной и непротиворечивой.