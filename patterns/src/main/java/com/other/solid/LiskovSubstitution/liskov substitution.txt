Lisk substitution principle

Provides some guidance on creating inheritance hierarchies.

Methods that use the base type should be able to use subtypes of the base type without knowing it.
 or It should be possible to substitute any subtype of the base type.


Goal:
It helps to clearly formulate the hierarchy of classes, determine the functionality for base and derived classes and avoid possible problems when applying polymorphism.


Rules:
  Preconditions cannot be strengthened in a subclass.
  In other words, subclasses should not create more preconditions than what is defined in the base class to perform some behavior
  Preconditions represent a set of conditions necessary for error-free execution of a method

  Postconditions cannot be relaxed in a subclass. That is, subclasses must fulfill all postconditions that are defined in the base class.

  Invariants - all conditions of the base class - must also be stored in a subclass


Solution:
  The problem is solved in the general case with the help of abstracting and highlighting the general functionality.
  That is, not one of them inherits from the other, but both of them inherit from one common class.
  Thus, the Liskov substitution principle makes you think about the correctness of constructing class hierarchies and applying polymorphism,
allowing you to get away from false inheritance hierarchies and making the whole system a class more coherent and consistent.