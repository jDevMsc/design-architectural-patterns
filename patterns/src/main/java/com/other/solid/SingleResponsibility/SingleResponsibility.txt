Each object must have one responsibility, and this responsibility must be fully encapsulated in the class.
All his behavior should be directed exclusively to ensure this responsibility.

Signal
1) If, when changing the code responsible for one responsibility,
in the application there are corrections to the code responsible for another responsibility, then this is the first signal.
2) the class object is allowed too much;
3) Any change in the logic of the object’s behavior leads to changes in other places of the application, where this was not originally intended;
4) It is not possible to easily separate and apply the class in another area of ​​the application, as this will pull unnecessary dependencies.


Cause
If there is a change in the process of compiling the report, there is a high probability that the code responsible for printing will become unusable.


Exceptions
1) Pooling responsibilities is a common practice and there is nothing wrong with that as long as it is easy to maintain.
2) Following the principle of sole responsibility depends on the functions of the software product and is the most difficult when designing applications
3) If, however, changes to the code responsible for one responsibility do not change the code responsible for another responsibility, then this principle can not be applied.